plugins {
    id 'com.android.library'
    id 'org.jetbrains.kotlin.android'
    id 'maven-publish'
}

def libraryVersion = '1.0.8'

android {
    namespace 'net.aliaslab.authenticatedrequests'
    compileSdk 33

    defaultConfig {
        minSdk 23
        targetSdk 33

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        consumerProguardFiles "consumer-rules.pro"
    }

    buildTypes {

        codedebug {
            minifyEnabled false
            testCoverageEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            buildConfigField("String", "VERSION_NAME", "\"${defaultConfig.versionName}\"")
        }
        debug {
            minifyEnabled false
            testCoverageEnabled true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            buildConfigField("String", "VERSION_NAME", "\"${defaultConfig.versionName}\"")
        }
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            buildConfigField("String", "VERSION_NAME", "\"${defaultConfig.versionName}\"")
        }

    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_11
        targetCompatibility JavaVersion.VERSION_11
    }
}

dependencies {

    implementation 'androidx.core:core-ktx:1.9.0'
    implementation 'androidx.appcompat:appcompat:1.6.1'
    implementation 'androidx.security:security-crypto-ktx:1.1.0-alpha05'
    //implementation 'com.google.android.material:material:1.8.0'
    implementation 'com.google.code.gson:gson:2.9.0'
    testImplementation 'junit:junit:4.13.2'
    androidTestImplementation 'androidx.test.ext:junit:1.1.5'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.5.1'
}


publishing {
    publications {
        aar(MavenPublication) {
            groupId 'net.aliaslab'
            version libraryVersion

            def debugAsset = "${project.getName()}-DEBUG"
            def snapshotAsset = "${project.getName()}-SNAP"
            def asset = libraryVersion.endsWith('SNAP') ? snapshotAsset : libraryVersion.endsWith('DEBUG') ? debugAsset : project.getName()
            artifactId(asset)

            if (libraryVersion.endsWith('DEBUG')) {
                artifact("$buildDir/outputs/aar/${project.getName()}-codedebug.aar")
            } else {
                artifact("$buildDir/outputs/aar/${project.getName()}-release.aar")
            }

            pom.withXml {
                def dependencies = asNode().appendNode('dependencies')
                configurations.getByName("releaseCompileClasspath").getResolvedConfiguration().getFirstLevelModuleDependencies().each {
                    def dependency = dependencies.appendNode('dependency')
                    dependency.appendNode('groupId', it.moduleGroup)
                    dependency.appendNode('artifactId', it.moduleName)
                    dependency.appendNode('version', it.moduleVersion)
                }
            }
        }
    }

    repositories {
        maven {
            name = 'trust-mobile-m2'
            url = "https://nexus.ts-paas.com/repository/trust-mobile-m2"
            credentials {
                username project.findProperty('nexusUser') ?: 'user'
                password project.findProperty('nexusPassword') ?: 'password'
            }
        }
    }
}
